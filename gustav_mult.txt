Timer unit: 1e-06 s

Total time: 0.007601 s
File: c:\Users\dan5j\Desktop\Python\investigaciones\polytopes\polytope_optimized_algorithms.py
Function: gustav_mult_opt at line 17

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    17                                           def gustav_mult_opt(iter_space, data1, data2):
    18         1          2.2      2.2      0.0      start_time_init = time.time()
    19         1        382.8    382.8      5.0      max_i = max(iter_space, key=lambda t: t[0])[0]
    20         1        374.3    374.3      4.9      max_k = max(iter_space, key=lambda t: t[2])[2]
    21         1          0.5      0.5      0.0      outshape = (max_i + 1, max_k + 1)
    22                                           
    23         1         20.7     20.7      0.3      c = np.zeros((outshape[0], outshape[1]))
    24         1          0.2      0.2      0.0      ptr1 = 0
    25         1          0.2      0.2      0.0      ptr2 = 0
    26         1          1.1      1.1      0.0      d1_indptr = data1.indptr
    27         1          0.3      0.3      0.0      d1_indices = data1.indices
    28         1       1516.2   1516.2     19.9      d1_sorted = csr_to_ij(d1_indptr, d1_indices)
    29         1        273.3    273.3      3.6      d1_dict = {coord: idx for idx, coord in enumerate(d1_sorted)}  # Convert to dictionary
    30                                           
    31         1          0.6      0.6      0.0      d2_indptr = data2.indptr
    32         1          0.4      0.4      0.0      d2_indices = data2.indices
    33         1       1540.7   1540.7     20.3      d2_sorted = csr_to_ij(d2_indptr, d2_indices)
    34         1        266.4    266.4      3.5      d2_dict = {coord: idx for idx, coord in enumerate(d2_sorted)}  # Convert to dictionary
    35                                           
    36         1          0.9      0.9      0.0      endtime = time.time()
    37         1        149.0    149.0      2.0      print(f"Overhead completed. Time {(endtime - start_time_init)*1000:.3f}ms")
    38         1          1.9      1.9      0.0      start_time = time.time()
    39      1007        323.3      0.3      4.3      for i, j, k in iter_space:
    40                                                   # Access dictionary for faster index lookup
    41      1007        417.6      0.4      5.5          ptr1 = d1_dict[(i, j)]
    42      1007        358.4      0.4      4.7          ptr2 = d2_dict[(j, k)]
    43                                           
    44      1007       1706.6      1.7     22.5          c[i][k] += data1.data[ptr1] * data2.data[ptr2]
    45                                           
    46         1          1.0      1.0      0.0      endtime = time.time()
    47         1        137.4    137.4      1.8      print(f"Total time of looping: {(endtime-start_time)*1000:.3f}ms")
    48         1        124.3    124.3      1.6      print(f"Total time: {(endtime-start_time_init)*1000:.3f}ms")
    49         1          0.7      0.7      0.0      return c

