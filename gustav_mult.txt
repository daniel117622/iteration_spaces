Timer unit: 1e-06 s

Total time: 0.012994 s
File: c:\Users\dan5j\Desktop\Python\investigaciones\polytopes\polytope_optimized_algorithms.py
Function: gustav_mult_opt at line 17

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    17                                           def gustav_mult_opt(iter_space, data1, data2):
    18         1          2.4      2.4      0.0      start_time_init = time.time()
    19         1        760.1    760.1      5.8      max_i = max(iter_space, key=lambda t: t[0])[0]
    20         1        753.4    753.4      5.8      max_k = max(iter_space, key=lambda t: t[2])[2]
    21         1          1.0      1.0      0.0      outshape = (max_i + 1, max_k + 1)
    22                                           
    23         1         27.3     27.3      0.2      c = np.zeros((outshape[0], outshape[1]))
    24         1          0.5      0.5      0.0      ptr1 = 0
    25         1          0.3      0.3      0.0      ptr2 = 0
    26         1          0.9      0.9      0.0      d1_indptr = data1.indptr
    27         1          0.4      0.4      0.0      d1_indices = data1.indices
    28         1       2906.0   2906.0     22.4      d1_sorted = csr_to_ij(d1_indptr, d1_indices)
    29         1        473.7    473.7      3.6      d1_dict = {coord: idx for idx, coord in enumerate(d1_sorted)}  # Convert to dictionary
    30                                           
    31         1          0.6      0.6      0.0      d2_indptr = data2.indptr
    32         1          0.4      0.4      0.0      d2_indices = data2.indices
    33         1       2886.5   2886.5     22.2      d2_sorted = csr_to_ij(d2_indptr, d2_indices)
    34         1        754.6    754.6      5.8      d2_dict = {coord: idx for idx, coord in enumerate(d2_sorted)}  # Convert to dictionary
    35                                           
    36         1          2.5      2.5      0.0      endtime = time.time()
    37         1          0.7      0.7      0.0      start_time = time.time()
    38      1007        529.8      0.5      4.1      for i, j, k in iter_space:
    39                                                   # Access dictionary for faster index lookup
    40      1007        628.3      0.6      4.8          ptr1 = d1_dict[(i, j)]
    41      1007        548.9      0.5      4.2          ptr2 = d2_dict[(j, k)]
    42                                           
    43      1007       2714.4      2.7     20.9          c[i][k] += data1.data[ptr1] * data2.data[ptr2]
    44                                           
    45         1          0.9      0.9      0.0      endtime = time.time()
    46         1          0.4      0.4      0.0      return c

