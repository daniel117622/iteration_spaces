Timer unit: 1e-07 s

Total time: 0.049381 s
File: c:\Users\dan5j\Desktop\Python\investigaciones\polytopes\polytope_optimized_algorithms.py
Function: gustav_mult_opt at line 17

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    17                                           def gustav_mult_opt(iter_space, data1, data2):
    18         1         22.0     22.0      0.0      start_time_init = time.time()
    19         1      17047.0  17047.0      3.5      max_i = max(iter_space, key=lambda t: t[0])[0]
    20         1      15795.0  15795.0      3.2      max_k = max(iter_space, key=lambda t: t[2])[2]
    21         1         27.0     27.0      0.0      outshape = (max_i + 1, max_k + 1)
    22                                           
    23         1        334.0    334.0      0.1      c = np.zeros((outshape[0], outshape[1]))
    24         1          3.0      3.0      0.0      ptr1 = 0
    25         1          3.0      3.0      0.0      ptr2 = 0
    26         1         16.0     16.0      0.0      d1_indptr = data1.indptr
    27         1          6.0      6.0      0.0      d1_indices = data1.indices
    28         1      63744.0  63744.0     12.9      d1_sorted = csr_to_ij(d1_indptr, d1_indices)
    29         1       8416.0   8416.0      1.7      d1_dict = {coord: idx for idx, coord in enumerate(d1_sorted)}  # Convert to dictionary
    30                                           
    31         1          9.0      9.0      0.0      d2_indptr = data2.indptr
    32         1          5.0      5.0      0.0      d2_indices = data2.indices
    33         1      91502.0  91502.0     18.5      d2_sorted = csr_to_ij(d2_indptr, d2_indices)
    34         1      22863.0  22863.0      4.6      d2_dict = {coord: idx for idx, coord in enumerate(d2_sorted)}  # Convert to dictionary
    35                                           
    36         1         26.0     26.0      0.0      endtime = time.time()
    37         1       1689.0   1689.0      0.3      print(f"Overhead completed. Time {endtime - start_time_init}")
    38         1         26.0     26.0      0.0      start_time = time.time()
    39      3342      17234.0      5.2      3.5      for i, j, k in iter_space:
    40                                                   # Access dictionary for faster index lookup
    41      3342      21931.0      6.6      4.4          ptr1 = d1_dict[(i, j)]
    42      3342      24824.0      7.4      5.0          ptr2 = d2_dict[(j, k)]
    43                                           
    44      3342     204843.0     61.3     41.5          c[i][k] += data1.data[ptr1] * data2.data[ptr2]
    45                                           
    46         1         34.0     34.0      0.0      endtime = time.time()
    47         1       1799.0   1799.0      0.4      print(f"Total time of looping: {endtime-start_time}")
    48         1       1597.0   1597.0      0.3      print(f"Total time: {endtime-start_time_init}")
    49         1         15.0     15.0      0.0      return c

